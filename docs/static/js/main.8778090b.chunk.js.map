{"version":3,"sources":["components/Home.js","components/SignIn.js","components/Navigation.js","components/Load.js","App.js","serviceWorker.js","index.js"],"names":["home","signIn","Navigation","to","load","lang","charset","name","content","http-equiv","class","action","method","enctype","type","id","for","value","App","path","component","Home","exact","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8PAWeA,EATF,WACT,OACI,6BACI,oCACA,+CCKGC,EATA,WACX,OACI,6BACI,uCACA,yCCQGC,EAVI,WACf,OACI,6BACI,kBAAC,IAAD,CAASC,GAAG,KAAZ,QACA,kBAAC,IAAD,CAASA,GAAG,WAAZ,UACA,kBAAC,IAAD,CAASA,GAAG,SAAZ,UC0CGC,EAjDF,WACX,OACE,6BACE,0BAAMC,KAAK,MACT,8BACE,0BAAMC,QAAQ,UACd,0BACEC,KAAK,WACLC,QAAQ,0CAEV,0BAAMC,aAAW,kBAAkBD,QAAQ,YAC3C,+CAEF,8BACE,yBAAKE,MAAM,aACT,yBAAKA,MAAM,OACT,yBAAKA,MAAM,mBACT,4CACA,0BACEC,OAAO,UACPC,OAAO,OACPC,QAAQ,uBAER,yBAAKH,MAAM,oBACT,2BACEI,KAAK,OACLP,KAAK,OACLQ,GAAG,OACHL,MAAM,sBAER,2BAAOM,IAAI,OAAON,MAAM,qBAAxB,gBAIF,2BACEI,KAAK,SACLG,MAAM,SACNP,MAAM,sCCdXQ,E,uKAfX,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWC,EAAMC,OAAK,IACtC,kBAAC,IAAD,CAAOH,KAAK,UAAUC,UAAWnB,IACjC,kBAAC,IAAD,CAAOkB,KAAK,QAAQC,UAAWhB,W,GATzBmB,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8778090b.chunk.js","sourcesContent":["import React from 'react';\n\nconst home = () => {\n    return (\n        <div>\n            <h1>Home</h1>\n            <p>Hello Filmhub!</p>\n        </div>\n    );\n}\n\nexport default home;","import React from 'react';\n\nconst signIn = () => {\n    return (\n        <div>\n            <h1>Sign In</h1>\n            <p>Sign In!</p>\n        </div>\n    );\n}\n\nexport default signIn;","import React from 'react';\n\nimport { NavLink } from 'react-router-dom';\n\nconst Navigation = () => {\n    return (\n        <div>\n            <NavLink to=\"/\">Home</NavLink>\n            <NavLink to=\"/signin\">SignIn</NavLink>\n            <NavLink to=\"/load\">Load</NavLink>\n        </div>\n    );\n}\n\nexport default Navigation;","import React from \"react\";\n\nconst load = () => {\n  return (\n    <div>\n      <html lang=\"en\">\n        <head>\n          <meta charset=\"UTF-8\" />\n          <meta\n            name=\"viewport\"\n            content=\"width=device-width, initial-scale=1.0\"\n          />\n          <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n          <title>File Upload</title>\n        </head>\n        <body>\n          <div class=\"container\">\n            <div class=\"row\">\n              <div class=\"col-md-6 m-auto\">\n                <h1>File Uploads</h1>\n                <form\n                  action=\"/upload\"\n                  method=\"POST\"\n                  enctype=\"multipart/form-data\"\n                >\n                  <div class=\"custom-file mb-3\">\n                    <input\n                      type=\"file\"\n                      name=\"file\"\n                      id=\"file\"\n                      class=\"custom-file-input\"\n                    />\n                    <label for=\"file\" class=\"custom-file-label\">\n                      Choose File\n                    </label>\n                  </div>\n                  <input\n                    type=\"submit\"\n                    value=\"Submit\"\n                    class=\"btn btn-primary btn-block\"\n                  />\n                </form>\n              </div>\n            </div>\n          </div>\n        </body>\n      </html>\n    </div>\n  );\n};\n\nexport default load;\n","import React, { Component } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nimport Home from \"./components/Home\";\nimport signIn from \"./components/SignIn\";\nimport Navigation from \"./components/Navigation\";\nimport load from \"./components/Load\";\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div>\n          <Navigation />\n          <Switch>\n            <Route path=\"/\" component={Home} exact />\n            <Route path=\"/signin\" component={signIn} />\n            <Route path=\"/load\" component={load} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}